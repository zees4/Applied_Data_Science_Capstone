# -*- coding: utf-8 -*-
"""W2_EDA_with_Pandas_Matplotlib.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PRbdURAd6rtH-82cBun7HKz26dCf1a42
"""

# andas is a software library written for the Python programming language for data manipulation and analysis.
import pandas as pd
#NumPy is a library for the Python programming language, adding support for large, multi-dimensional arrays and matrices, along with a large collection of high-level mathematical functions to operate on these arrays
import numpy as np
# Matplotlib is a plotting library for python and pyplot gives us a MatLab like plotting framework. We will use this in our plotter function to plot data.
import matplotlib.pyplot as plt
#Seaborn is a Python data visualization library based on matplotlib. It provides a high-level interface for drawing attractive and informative statistical graphics
import seaborn as sns

df=pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/datasets/dataset_part_2.csv")

df.head(5)

df.shape

sns.catplot(y="PayloadMass", x="FlightNumber", hue="Class", data=df, aspect = 5)
plt.xlabel("Flight Number",fontsize=20)
plt.ylabel("Pay load Mass (kg)",fontsize=20)
plt.show()

# TASK 1: Visualize the relationship between Flight Number and Launch Site

sns.catplot(y="LaunchSite", x="FlightNumber", hue="Class", data=df, aspect = 5)
plt.xlabel("Flight Number",fontsize=20)
plt.ylabel("Launch_Site",fontsize=20)
plt.show()

# TASK 2: Visualize the relationship between Payload and Launch Site

sns.catplot(y="LaunchSite", x="PayloadMass", hue="Class", data=df, aspect = 5)
plt.xlabel("Pay load Mass (kg)",fontsize=20)
plt.ylabel("Launch_Site",fontsize=20)
plt.show()

# TASK  3: Visualize the relationship between success rate of each orbit type

grouped_df = df.groupby('Orbit')['Class'].mean().reset_index()

sns.barplot(y="Class", x="Orbit", data=grouped_df)
plt.xlabel("Orbit",fontsize=20)
plt.ylabel("Class",fontsize=20)
plt.show()

# TASK  4: Visualize the relationship between FlightNumber and Orbit type
sns.catplot(y="Orbit", x="FlightNumber", hue="Class", data=df)
plt.xlabel("Flight Number",fontsize=20)
plt.ylabel("Orbit",fontsize=20)
plt.title("FlightNumber x Orbit")
plt.show()

# TASK  5: Visualize the relationship between Payload and Orbit type

sns.catplot(y="Orbit", x="PayloadMass", hue="Class", data=df)
plt.xlabel("PayloadMass",fontsize=20)
plt.ylabel("Orbit",fontsize=20)
plt.title("PayloadMass x Orbit")
plt.show()

# TASK  6: Visualize the launch success yearly trend

# A function to Extract years from the date
year=[]
def Extract_year(date):
    for i in df["Date"]:
        year.append(i.split("-")[0])
    return year

df1 = pd.DataFrame(Extract_year(df['Date']) , columns =['year'])

df1['Class']=df['Class']

df1.groupby('year')['Class'].mean().reset_index()

# Plot a line chart with x axis to be the extracted year and y axis to be the success rate

sns.lineplot(data=df1, x='year', y="Class")
plt.xlabel("year",fontsize=20)
plt.ylabel("success rate",fontsize=20)
plt.title("year x success rate")
plt.show()

#Features Engineering

features = df[['FlightNumber', 'PayloadMass', 'Orbit', 'LaunchSite', 'Flights', 'GridFins', 'Reused', 'Legs', 'LandingPad', 'Block', 'ReusedCount', 'Serial']]
features.head()

# TASK  7: Create dummy variables to categorical columns
# HINT: Use get_dummies() function on the categorical columns

features_one_hot = pd.get_dummies(features, columns =['Orbit', 'LaunchSite', 'LandingPad', 'Serial'])

features_one_hot = features_one_hot.astype('float32')

features_one_hot.to_csv('dataset_part_3.csv', index=False)

