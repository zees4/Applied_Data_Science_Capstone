# -*- coding: utf-8 -*-
"""W2_EDA_with_SQL.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zY88NVaoI1WWE43XmiEGUdUckW3mjV3m
"""

!pip install sqlalchemy==1.3.9

# Commented out IPython magic to ensure Python compatibility.
# %load_ext sql

import csv, sqlite3

con = sqlite3.connect("my_data1.db")
cur = con.cursor()

# Commented out IPython magic to ensure Python compatibility.
# %sql sqlite:///my_data1.db

import pandas as pd
df = pd.read_csv("https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBM-DS0321EN-SkillsNetwork/labs/module_2/data/Spacex.csv")
df.to_sql("SPACEXTBL", con, if_exists='replace', index=False,method="multi")

# Commented out IPython magic to ensure Python compatibility.
# %sql SELECT * FROM SPACEXTBL LIMIT 5

# Commented out IPython magic to ensure Python compatibility.
#display names of unique launch site in space mission

# %sql SELECT DISTINCT launch_site FROM SPACEXTBL

# Commented out IPython magic to ensure Python compatibility.
#display 5 record where launch site beign with string 'CCA'

# %sql SELECT * FROM SPACEXTBL WHERE "Launch_Site" LIKE 'CCA%' LIMIT 5

# Commented out IPython magic to ensure Python compatibility.
#display total payload mass carried by boosters launched by NASA (CRS)

# %sql SELECT SUM(PAYLOAD_MASS__KG_)FROM SPACEXTBL WHERE "Customer" LIKE 'NASA (CRS)%'

# Commented out IPython magic to ensure Python compatibility.
# Display average payload mass carried by booster version F9 v1.1

# %sql SELECT AVG(PAYLOAD_MASS__KG_)FROM SPACEXTBL WHERE "Booster_Version" LIKE 'F9 v1.1%'

# Commented out IPython magic to ensure Python compatibility.
## List the date when the first succesful landing outcome in ground pad was acheived.

# %sql SELECT * FROM SPACEXTBL WHERE "Landing_Outcome" LIKE "Success (ground pad)%" ORDER BY Date ASC LIMIT 1

# Commented out IPython magic to ensure Python compatibility.
# List the names of the boosters which have success in drone ship and have payload mass greater than 4000 but less than 6000
# %sql SELECT *FROM SPACEXTBL WHERE "Landing_Outcome" LIKE "Success (drone ship)%" AND "PAYLOAD_MASS__KG_" > 4000 AND "PAYLOAD_MASS__KG_" < 6000

# Commented out IPython magic to ensure Python compatibility.
# List the total number of successful and failure mission outcomes

# %sql SELECT SUM(CASE WHEN Mission_Outcome = 'Success' THEN 1 ELSE 0 END) AS Mission_Outcome_Total, SUM(CASE WHEN Mission_Outcome = 'Failure' THEN 1 ELSE 0 END) AS Mission_Outcome_Total FROM SPACEXTBL

# Commented out IPython magic to ensure Python compatibility.
# List the   names of the booster_versions which have carried the maximum payload mass. Use a subquery
#%sql SELECT MAX(PAYLOAD_MASS__KG_	)FROM SPACEXTBL
# %sql SELECT *FROM SPACEXTBL WHERE PAYLOAD_MASS__KG_ = 15600

# Commented out IPython magic to ensure Python compatibility.
# List the records which will display the month names, failure landing_outcomes in drone ship ,booster versions, launch_site for the months in year 2015.

#**Note: SQLLite does not support monthnames. So you need to use  substr(Date, 4, 2) as month to get the months and substr(Date,7,4)='2015' for year.**

# %sql SELECT substr(Date, 4, 2) as month,booster_version,"Landing _Outcome" from SPACEXTBL where "Landing _Outcome" ='Failure (drone ship)' and substr(Date,7,4)='2015'

# Commented out IPython magic to ensure Python compatibility.
# Rank the  count of  successful landing_outcomes between the date 04-06-2010 and 20-03-2017 in descending order.
# %sql SELECT "Landing_Outcome",count("Landing_Outcome")as LANDING_OUTCOME_COUNT, DATE FROM SPACEXTBL WHERE substr(Date,7,4) || substr(Date, 4, 2) BETWEEN '20100604' AND '20170320' GROUP BY "Landing_Outcome" ORDER BY COUNT("Landing_Outcome") desc

# Commented out IPython magic to ensure Python compatibility.
# %sql SELECT PAYLOAD_MASS__KG_ FROM SPACEXTBL ORDER BY payload_mass__kg_ DESC LIMIT 1

# Commented out IPython magic to ensure Python compatibility.
# %sql select  count("Mission_Outcome") as MISSION_OUTCOME_COUNT,Launch_Site  from SPACEXTBL group by Launch_Site

# Commented out IPython magic to ensure Python compatibility.
# %sql select payload_mass__kg_ from SPACEXTBL LIMIT 5

# Commented out IPython magic to ensure Python compatibility.
# %sql select min(payload_mass__kg_) from SPACEXTBL

